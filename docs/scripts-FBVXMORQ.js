#!/usr/bin/env node
"use strict";var __createBinding=this&&this.__createBinding||(Object.create?function(e,t,o,n){n===void 0&&(n=o);var r=Object.getOwnPropertyDescriptor(t,o);(!r||("get"in r?!t.__esModule:r.writable||r.configurable))&&(r={enumerable:!0,get:function(){return t[o]}}),Object.defineProperty(e,n,r)}:function(e,t,o,n){n===void 0&&(n=o),e[n]=t[o]}),__setModuleDefault=this&&this.__setModuleDefault||(Object.create?function(e,t){Object.defineProperty(e,"default",{enumerable:!0,value:t})}:function(e,t){e.default=t}),__importStar=this&&this.__importStar||function(e){if(e&&e.__esModule)return e;var t={};if(e!=null)for(var o in e)o!=="default"&&Object.prototype.hasOwnProperty.call(e,o)&&__createBinding(t,e,o);return __setModuleDefault(t,e),t},__importDefault=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(exports,"__esModule",{value:!0});const commander=__importStar(require("commander")),fs=__importStar(require("fs")),os=__importStar(require("os")),path=__importStar(require("path")),index_1=__importDefault(require("./index")),smtchecker_1=__importDefault(require("./smtchecker")),smtsolver_1=__importDefault(require("./smtsolver")),originalUncaughtExceptionListeners=process.listeners("uncaughtException");process.removeAllListeners("uncaughtException");const program=new commander.Command,commanderParseInt=function(e){const t=parseInt(e,10);if(isNaN(t))throw new commander.InvalidArgumentError("Not a valid integer.");return t};program.name("solcjs"),program.version(index_1.default.version()),program.option("--version","Show version and exit.").option("--optimize","Enable bytecode optimizer.",!1).option("--optimize-runs <optimize-runs>","The number of runs specifies roughly how often each opcode of the deployed code will be executed across the lifetime of the contract. Lower values will optimize more for initial deployment cost, higher values will optimize more for high-frequency usage.",commanderParseInt).option("--bin","Binary of the contracts in hex.").option("--abi","ABI of the contracts.").option("--standard-json","Turn on Standard JSON Input / Output mode.").option("--base-path <path>","Root of the project source tree. The import callback will attempt to interpret all import paths as relative to this directory.").option("--include-path <path...>","Extra source directories available to the import callback. When using a package manager to install libraries, use this option to specify directories where packages are installed. Can be used multiple times to provide multiple locations.").option("-o, --output-dir <output-directory>","Output directory for the contracts.").option("-p, --pretty-json","Pretty-print all JSON output.",!1).option("-v, --verbose","More detailed console output.",!1),program.parse(process.argv);const options=program.opts(),files=program.args,destination=options.outputDir||".";function abort(e){console.error(e||"Error occurred"),process.exit(1)}function readFileCallback(e){const t=[options.basePath?options.basePath:""].concat(options.includePath?options.includePath:[]);for(const o of t){const n=(o?o+"/":"")+e;if(fs.existsSync(n))try{return{contents:fs.readFileSync(n).toString("utf8")}}catch(r){return{error:"Error reading "+n+": "+r}}}return{error:"File not found inside the base path or any of the include paths."}}function withUnixPathSeparators(e){return os.platform()!=="win32"?e:e.replace(/\\/g,"/")}function makeSourcePathRelativeIfPossible(e){const t=options.basePath?path.resolve(options.basePath):path.resolve("."),o=options.includePath?options.includePath.map(r=>path.resolve(r)):[],n=path.resolve(e);for(const r of[t].concat(o)){const i=path.relative(r,n);if(!i.startsWith("../"))return withUnixPathSeparators(i)}return withUnixPathSeparators(n)}function toFormattedJson(e){return JSON.stringify(e,null,program.prettyJson?4:0)}function reformatJsonIfRequested(e){return program.prettyJson?toFormattedJson(JSON.parse(e)):e}let callbacks;if((options.basePath||!options.standardJson)&&(callbacks={import:readFileCallback}),options.standardJson){const e=fs.readFileSync(process.stdin.fd).toString("utf8");program.verbose&&console.log(`>>> Compiling:
`+reformatJsonIfRequested(e)+`
`);let t=reformatJsonIfRequested(index_1.default.compile(e,callbacks));try{if(smtsolver_1.default.availableSolvers.length===0)console.log(">>> Cannot retry compilation with SMT because there are no SMT solvers available.");else{const o=smtchecker_1.default.handleSMTQueries(JSON.parse(e),JSON.parse(t),smtsolver_1.default.smtSolver,smtsolver_1.default.availableSolvers[0]);o&&(program.verbose&&console.log(`>>> Retrying compilation with SMT:
`+toFormattedJson(o)+`
`),t=reformatJsonIfRequested(index_1.default.compile(JSON.stringify(o),callbacks)))}}catch(o){const n={component:"general",formattedMessage:o.toString(),message:o.toString(),type:"Warning"},r=JSON.parse(t);r.errors||(r.errors=[]),r.errors.push(n),t=toFormattedJson(r)}program.verbose&&console.log(">>> Compilation result:"),console.log(t),process.exit(0)}else files.length===0&&(console.error("Must provide a file"),process.exit(1));if(options.bin||options.abi||abort("Invalid option selected, must specify either --bin or --abi"),!options.basePath&&options.includePath&&options.includePath.length>0&&abort("--include-path option requires a non-empty base path."),options.includePath)for(const e of options.includePath)e||abort("Empty values are not allowed in --include-path.");const sources={};for(let e=0;e<files.length;e++)try{sources[makeSourcePathRelativeIfPossible(files[e])]={content:fs.readFileSync(files[e]).toString()}}catch(t){abort("Error reading "+files[e]+": "+t)}const cliInput={language:"Solidity",settings:{optimizer:{enabled:options.optimize,runs:options.optimizeRuns},outputSelection:{"*":{"*":["abi","evm.bytecode"]}}},sources};program.verbose&&console.log(`>>> Compiling:
`+toFormattedJson(cliInput)+`
`);const output=JSON.parse(index_1.default.compile(JSON.stringify(cliInput),callbacks));let hasError=!1;if(!output)abort("No output from compiler");else if(output.errors)for(const e in output.errors){const t=output.errors[e];t.severity==="warning"?console.log(t.formattedMessage):(console.error(t.formattedMessage),hasError=!0)}fs.mkdirSync(destination,{recursive:!0});function writeFile(e,t){e=path.join(destination,e),fs.writeFile(e,t,function(o){o&&console.error("Failed to write "+e+": "+o)})}for(const e in output.contracts)for(const t in output.contracts[e]){let o=e+":"+t;o=o.replace(/[:./\\]/g,"_"),options.bin&&writeFile(o+".bin",output.contracts[e][t].evm.bytecode.object),options.abi&&writeFile(o+".abi",toFormattedJson(output.contracts[e][t].abi))}originalUncaughtExceptionListeners.forEach(function(e){process.addListener("uncaughtException",e)}),hasError&&process.exit(1);
